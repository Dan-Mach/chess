
/*int main () {

   
    
     int index = 0;

     for ( index = 0; index < BRD_SQ_NUM; ++index) {
          if (index%10 == 0) {
               printf("\n");
          }
          printf ("%5d", Sq120ToSq64[index]);
     }

     printf( "\n");
     printf( "\n");

     for (index = 0; index < 64; ++index ) {
          if (index%8 == 0 ) {
               printf ("\n");
          }
          printf ("%5d", Sq64ToSq120[index]);
     }

    //assert
    int num = 2;
     int nuts = 4;
     ASSERT( num == nuts);
     
     //bitboards
     U64 playBitBoard = 0ULL;

     printf("Start: \n\n");
     PrintBitBoard(playBitBoard);

     playBitBoard |= (1ULL << SQ64(D2));
     printf("D2 Addded: \n\n");
     PrintBitBoard(playBitBoard);

     playBitBoard |= (1ULL << SQ64(G2));
     printf("G2 Addded: \n\n");
     PrintBitBoard(playBitBoard);

     return 0; 
     AllInit ();
     U64 playBitBoard = 0ULL;

     playBitBoard |= (1ULL << SQ64(D2));
     playBitBoard |= (1ULL << SQ64(D3));
     playBitBoard |= (1ULL << SQ64(D4));

     int sq64 = 0;     
     while (playBitBoard) {

          sq64 = POP(&playBitBoard);
          printf("popped:%d\n", sq64);
          PrintBitBoard(playBitBoard);
     }
     return 0;

     AllInit ();

     int index = 0;

     U64 playBitBorad = 0ULL;

     for (index = 0; index < 64 ; index++) {
          printf("index: %d\n", index );
          PrintBitBoard(SetMask[index]);
          printf("\n");

          

     }
     
     int index = 0;

     U64 playBitBorad = 0ULL;

     for (index = 0; index < 64 ; index++) {
          printf("index: %d\n", index );
          PrintBitBoard(ClearMask[index]);
          printf("\n");
     }

     /*SETBIT(playBitBorad, 61);
     PrintBitBoard(playBitBorad);*/



